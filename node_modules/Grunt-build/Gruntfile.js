/**
 * Author: denghuafeng
 * Date: 2016/4/19
 * Plugin Name: Gruntfile
 * Description: grunt配置文件
 */
module.exports = function(grunt) {
    var util ={
        //模块名称
        modulesArr:
            [
                'check_account',
                'check_site_info',
                'clear_sec_pwd',
                'complaint',
                'index',
                'other',
                'problem',
                'recover_avatar',
                'repair_account',
                'report_plugin',
                'stolen'
            ],
        static_common:"static/common/",
        static_home:"static/home/",
        static_modules:"static/modules/",
        static_debug:"../../web/ptres.37.com/js/kf2016/debug/",
        css_dest:"../../web/img1.37wanimg.com/kf2016/css/",
        images_dest: "../../web/img1.37wanimg.com/kf2016/images/",
        js_dest:"../../web/ptres.37.com/js/kf2016/"
    };
    //导入grunt插件
    require("load-grunt-config")(grunt);
    //初始化grunt任务配置
    grunt.initConfig({
        //获取package配置
        pkg: grunt.file.readJSON("package.json"),
        modulesName: "index",
        //合并modules目录以及home目录css至debug目录
        concat: {
            modulesCss: {
                options: {
                    process: function( content, filepath ) {
                        //grunt.log.writeln( content );
                        //grunt.log.writeln( filepath );
                        content = content.replace( /images_/g, "../images/" + grunt.config.get("modulesName") );
                        content = content.replace( /\(images/g, "\(../images/" + grunt.config.get("modulesName")  );
                        content = content.replace( /\"images/g, "\"../images/" + grunt.config.get("modulesName")  );
                        return content;}
                },
                src:[ util.static_home+"<%= modulesName %>/*.css",  util.static_modules+"<%= modulesName %>/*/*.css" ],
                dest: util.static_debug+"css/<%= modulesName %>.css"

            },
            commonCss: {
                options: {
                    process: function( content, filepath ) {
                        //grunt.log.writeln( content );
                        //grunt.log.writeln( filepath );
                        content = content.replace( /images_/g, "../images/common" );
                        content = content.replace( /\(images/g, "\(../images/common" );
                        content = content.replace( /\"images/g, "\"../images/common" );
                        return content;
                    }
                },
                src:[ util.static_common+"*.css"],
                dest: util.static_debug+"css/common.css"
            },
            //合并commonCss至sprite/src缓存文件夹
            commonCssToSprite: {
                src:[ util.static_common+"*.css"],
                dest: util.static_debug+"sprite/src/common.css"
            },
            //合并modulesCss至sprite/src缓存文件夹
            modulesCssToSprite:{
                src:[ util.static_home+"<%= modulesName %>/*.css",  util.static_modules+"<%= modulesName %>/*/*.css" ,util.static_modules+"<%= modulesName %>/*.css" ],
                dest: util.static_debug+"sprite/src/<%= modulesName %>.css"
            },
            spriteModulesCssToDebug: {
                options: {
                    process: function( content, filepath ) {
                        //grunt.log.writeln( content );
                        //grunt.log.writeln( filepath );
                        return content.replace( /images_/g, "../images/"+grunt.config.get("modulesName") );
                    }
                },
                src: [ util.static_debug+"sprite/dest/css/"+"<%= modulesName%>"+".sprite.css" ],
                dest: util.static_debug+"css/<%= modulesName%>.css"
            }
        },
        //合并modules目录以及home目录js至debug目录(rjs)
        requirejs: {
            debugJs: {
                options: {
                    baseUrl: "static/",
                    exclude: ["common"],
                    mainConfigFile:"static/home/"+"<%= modulesName %>"+"/<%= modulesName %>.js",
                    name: "home/"+"<%= modulesName %>"+"/<%= modulesName %>",
                    out:"../../web/ptres.37.com/js/kf2016/debug/js/"+"<%= modulesName %>"+".js",
                    optimize: "none"
                }
            }
        },

        //复制 web/ptres.37.com/kf2016/debug/images 目录文件images至 img1.37img.com/kf2016/images
        copy: {
            //复制文件至debug目录
            imagesToDebug: {
                src: [ util.static_home+"<%= modulesName %>/images/*.*", util.static_modules+"<%= modulesName %>/images/*.*" ],
                dest: util.static_debug+"<%= modulesName %>/images/*.*"
            },
            //复制modules文件至debug
            modulesImgToDebug: {
                expand: true,
                src: [  util.static_home+"<%= modulesName %>/images_/**" ,util.static_modules+"<%= modulesName %>/*/images_/**" ,util.static_debug+"sprite/dest/images/<%= modulesName %>/**"],
                dest: util.static_debug+"images/<%= modulesName %>/",
                flatten: true,
                filter: "isFile"
            },
            //复制common文件至debug
            commonImgToDebug: {
                expand: true,
                src: [ util.static_common+"images_/**",util.static_debug+"sprite/dest/images/<%= modulesName %>/**" ],
                dest: util.static_debug+"images/common/",
                flatten: true,
                filter: "isFile"
            },
            //复制modules文件至sprite
            modulesImgToSprite: {
                expand: true,
                src: [ util.static_home+"images/**",util.static_modules+"<%= modulesName %>/*/images/**" ],
                dest: util.static_debug+"sprite/src/images/",
                flatten: true,
                filter: "isFile"
            },
            //复制common文件至sprite
            commonImgToSprite: {
                expand: true,
                src: [ util.static_common+"images/**" ],
                dest: util.static_debug+"sprite/src/images/",
                flatten: true,
                filter: "isFile"
            },
            //复制文件
            imagesDebugToImg1: {
                expand: true,
                cwd: util.static_debug +'images/',
                src: '**',
                dest: util.images_dest
            }
            //commonToDebug: {
            //    expand: true,
            //    cwd: util.static_common,
            //    src: util.static_common+"common/*.css",
            //    dest: util.static_debug + "/css/common/"
            //}
        },
        //css压缩
        cssmin: {
            target: {
                files: [{
                    expand: true,
                    cwd: util.static_debug +'css',
                    src: ['*.css'],
                    dest: util.css_dest,
                    ext: '.css'
                }]
            }
        },
        //js压缩
        uglify: {
            target: {
                files: [{
                    expand: true,
                    cwd: util.static_debug +'js',
                    src: '*.js',
                    dest: util.js_dest
                }]
            }
        },
        //雪碧图
        sprite: {
            options: {
                // sprite背景图源文件夹，只有匹配此路径才会处理，默认 images/slice/
                imagepath: util.static_debug+"sprite/src/images/",
                // 映射CSS中背景路径，支持函数和数组，默认为 null
                imagepath_map: null,
                // 雪碧图输出目录，注意，会覆盖之前文件！默认 images/
                spritedest: util.static_debug+"sprite/dest/images/<%= modulesName %>/",
                // 替换后的背景路径，默认 ../images/
                spritepath: '../images/<%= modulesName %>/',
                // 各图片间间距，如果设置为奇数，会强制+1以保证生成的2x图片为偶数宽高，默认 0
                padding: 2,
                // 是否使用 image-set 作为2x图片实现，默认不使用
                useimageset: false,
                // 是否以时间戳为文件名生成新的雪碧图文件，如果启用请注意清理之前生成的文件，默认不生成新文件
                newsprite: false,
                // 给雪碧图追加时间戳，默认不追加
                spritestamp: true,
                // 在CSS文件末尾追加时间戳，默认不追加
                cssstamp: true,
                // 默认使用二叉树最优排列算法
                algorithm: 'binary-tree',
                // 默认使用`pixelsmith`图像处理引擎
                engine: 'pixelsmith'
            },
            autoSprite: {
                files: [{
                    // 启用动态扩展
                    expand: true,
                    // css文件源的文件夹
                    cwd:  util.static_debug+"sprite/src/",
                    // 匹配规则
                    src: '*.css',
                    // 导出css和sprite的路径地址
                    dest: util.static_debug+"sprite/dest/css/",
                    // 导出的css名
                    ext: '.sprite.css'
                }]
            }
        },
        //监控文件夹 /debug/文件夹 以及输出目录文件夹
        //删除 debug 文件夹
        clean: {
            cleanDebug: [ util.static_debug ],
            cleanSprite: [ util.static_debug+"sprite/" ],
            debugImagesModules: [ util.static_debug+"images/<%= modulesName%>" ],
            options: {
                //强行删除，如果不加，无法删除gruntfile所在文件夹以外的文件夹
                force: true
            }
        }
        //压缩 web/ptres.37.com/kf2016/debug/js 目录文件js至 web/ptres.37.com/kf2016/js
        //压缩 web/ptres.37.com/kf2016/debug/css 目录文件css至 img1.37img.com/kf2016/css
        //debug监控文件开启，当static文件夹变动时，实时输出到debug文件夹并提示修改的文件位置
    });

    //合并频道的css
    //grunt.registerTask( "concat-css", function( modules ) {
    //    var fPath = "";
    //    //判断是否输入模块名
    //    if ( !modules ) {
    //        grunt.log.write("没有输入模块名！");
    //        return;
    //    }
    //    //判断是否common文件夹
    //    if ( modules === "common" ) {
    //        fPath = "static/common/";
    //    } else {
    //        fPath = "static/home/"+ modules + "/";
    //    }
    //    //判断是否有此目录
    //    if ( !grunt.file.isDir( fPath ) ) {
    //        grunt.log.error( "没有 [" + modules +"] 此模块" );
    //        return;
    //    }
    //
    //    //配置模块名，并跑合并任务
    //    grunt.config.set( "modulesName" ,modules);
    //    grunt.task.run(['concat']);
    //
    //});

    //合并制定数组里合并css任务
    //grunt.registerTask( "con", function() {
    //    for ( var module in util.modulesArr ){
    //        grunt.task.run(['concat-css:'+util.modulesArr[module]]);
    //    }
    //});

    //输出雪碧图
    /*
     * 1、合并css到缓存目录sprite/src/*.css（concat:commonCssToSprite|concat:modulesCssToSprite）
     * 2、复制images到缓存目录sprite/src/images/*.png（copy:commonImgToSprite|copy:modulesImgToSprite）
     * 3、雪碧图输出至缓存目录（sprite）
     * 4、css合并到debug\css目录（concat:spriteModulesCssToDebug）
     * 5、image_\缓存目录复制到debug\images目录（copy:commonImgToDebug|copy:modulesImgToDebug）
     * 6、删除sprite缓存目录(clean:cleanSprite)
     */
    grunt.registerTask( "spriteModules", function( modules ) {
        var fPath = "";
        grunt.config.set( "modulesName" ,modules);
        //判断是否输入模块名
        if ( !modules ) {
            grunt.log.write("没有输入模块名！");
            return;
        }

        //判断是否common文件夹
        if ( modules === "common" ) {
            fPath = "static/common/";
            grunt.task.run(['concat:commonCssToSprite','copy:commonImgToSprite','sprite','concat:spriteModulesCssToDebug','copy:commonImgToDebug','clean:cleanSprite']);

        } else {
            fPath = "static/home/"+ modules + "/";
            //TODO
            //判断是否有此目录
            if ( !grunt.file.isDir( fPath ) ) {
                grunt.log.error( "没有 [" + modules +"] 此模块" );
                return;
            }
            grunt.task.run(['concat:modulesCssToSprite','copy:modulesImgToSprite','sprite','concat:spriteModulesCssToDebug','copy:modulesImgToDebug','clean:cleanSprite']);

        }


    });

    //requireJs合并
    grunt.registerTask( "rjsModules", function ( modules ){
        grunt.config.set( "modulesName" ,modules);
        if ( !modules ) {
            grunt.log.write("没有输入模块名！");
            return;
        }
        grunt.task.run(['requirejs']);
    });

    //合并制定数组里js合并任务
    grunt.registerTask( "rjsAll", function() {
        for ( var module in util.modulesArr ){
            grunt.task.run(['rjsModules:'+util.modulesArr[module]]);
        }
    });

    //合并制定数组里css合并任务
    grunt.registerTask( "cssAll", function() {
        for ( var module in util.modulesArr ){
            grunt.task.run(['spriteModules:'+util.modulesArr[module]]);
        }
    });

};