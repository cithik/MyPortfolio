/**
 * Author: denghuafeng
 * Date: 2016/5/16
 * Plugin Name:
 * Description: .
 */
define([
    "common",
    "http://ptres.37.com/js/sq/widget/sq.footer.js",
    "http://ptres.37.com/js/sq/plugin/jquery.placeholder.min.js"
],function(common){

    var ajaxFn = common.util.callApi;

    var modulesUtil = {

        kfDomain:"http://kf.37.com",
        vercodeUrl: "/index.php?c=index&a=aucode",
        vercodeUrlCheck: "/index.php?c=index&a=check_code",
        vercodeEmailUrl:"",
        aj: {
            type: "post",
            cache: false
        },
        /**
         * 判断IE系列
         * @returns {boolean}
         */
        isIE: function(){
            return window.attachEvent && navigator.userAgent.indexOf('Opera') === -1 ;
        },
        isIE6: function() {
            return !window.XMLHttpRequest;
        },
        isIE7: function() {
            return navigator.userAgent.indexOf("MSIE 7.0") > 0 ;
        },
        isIE8: function(){
            return navigator.userAgent.indexOf("MSIE 8.0") > 0 ;
        },
        isIE11: function(){
            return navigator.userAgent.indexOf("rv") > 0 ;
        },
        /**
         @description        游戏下拉框
         @param
             --elem          必填，下拉框Jq对象
         @return             undefined
         */
        dropdown: function( elem ) {
            var _this = this;
            if ( !elem || !elem.length ) return;
            elem[0].value = "";
            var $dropdown = $( "#dropdown" ),
                $title = $dropdown.find( ".dropdown-title" ),
                $panels = $dropdown.children( "div" );

            var isIE = !!window.ActiveXObject,
                isIE6 = isIE && !window.XMLHttpRequest,
                isIE7 = navigator.userAgent.indexOf("MSIE 7")>0;

            elem.on({
                focusin: function( e ) {
                    $dropdown.data("input",this);
                    //var info = $.data( this, "info" );alert($dropdown[0].id);
                    var info = $dropdown.data( "info" );
                    if ( info ) {
                        $title.find( "li" ).eq( info.tabs ).trigger("click");
                        if(isIE6 || isIE7){
                            setTimeout(function(){
                                $panels.eq( info.tabs ).find(":radio").show();
                            },20);
                        }
                    } else {
                        $title.find( "li" ).removeClass( "focus" )
                            .eq( 0 ).addClass( "focus" );
                        $panels.hide().first()
                            .find( ":checked" ).prop( "checked", false ).end()
                            .show();
                        if(isIE6 || isIE7){
                            $panels.not(":first").each(function(){
                                var $radios = $(this).find(":radio");
                                $radios.hide();
                            });
                            $panels.eq(0).find(":radio").show();
                        }
                    }


                    var offset = $( e.target ).offset(),
                        target = {
                            top: offset.top + elem.height() + 11,
                            left: offset.left
                        };
                    $dropdown.show().offset( target );
                },
                keydown: function(e) {
                    e.preventDefault();
                },
                keypress: function(e) {
                    e.preventDefault();
                }
            });

            if ( _this.dropInit ) {
                return;
            }

            _this.dropInit = true;

            $( document ).on( "click", function(e) {
                if ( !$(e.target).closest("#dropdown").length && e.target !== $.data($dropdown[0], "input") ) {
                    if(isIE6 || isIE7){
                        $panels.filter(".dropdown-panel:visible").find(":radio").hide();
                    }
                    $dropdown.hide();
                }
            });

            $dropdown
                .on({
                    mouseenter: function() {
                        if ( this.className.indexOf("focus") > -1 ) {
                            return;
                        }
                        $(this).addClass( "hover" );
                    },
                    mouseleave: function() {
                        $(this).removeClass( "hover" );
                    },
                    click: function() {
                        if ( this.className.indexOf("focus") > -1 ) {
                            return;
                        }
                        var $this = $( this );
                        $this.addClass( "focus" )
                            .siblings().removeClass( "focus" );
                        $panels.hide().eq( $this.index() ).show();
                        if(isIE6 || isIE7){
                            $panels.eq($this.index()).find(":radio").show()
                        }
                    }
                }, ".dropdown-title > li" )
                .on({
                    mouseenter: function() {
                        if ( _this.isIE6() ) {
                            $( this ).addClass( "hover" );
                        }
                    },
                    mouseleave: function() {
                        if ( _this.isIE6() ) {
                            $( this ).removeClass( "hover" );
                        }
                    },
                    click: function() {
                        this.firstChild.checked = true;
                        $( this.firstChild ).trigger( "change" );
                    }
                }, ".dropdown-panel li" )
                .on( "change", ":radio", function() {
                    var $this = $( this ),
                        $p = $this.parent(),
                        val = $p.text(),
                        info = {
                            index: $p.index(),
                            tabs: $title.find( ".focus" ).index()
                        },
                        input = $dropdown.data("input");
                    //input = $.data( $dropdown[0], "input" );
                    $this.parent().siblings().removeClass("on");
                    $this.parent().addClass("on");
                    //$.data( input, "info", info );
                    $dropdown.data("info", info);
                    input.value = val;
                    input.form.game.value = $this.val();
                    $( input ).trigger( "keyup" ).trigger( "focusout" )
                        .closest( "p" ).next().find( ":input:first" ).focus();

                    $dropdown.hide();
                });
        },
        /**
         @description        选择城市
         @param
             --o1           必填，selectMenu对象1（省份）
             --o2           必填，selectMenu对象2（城市）
             --$e:          必填，城市的jq对象
         @return             undefined
         */
        selectCity: function(o1,o2,$e){
            var _this = this;
            o1.bind("change",function(item){
                ajaxFn( $.extend( true, {}, _this.aj, {
                    url: _this.kfDomain+"/index.php?c=index&a=getJSONCity&p="+item.value,
                    data: "",
                    successCall: function( res ) {
                        temp = [ "<option value=''>请选择</option>" ];
                        for ( i in res ) {
                            temp.push( "<option value='" + i + "'>" + res[i] + "</option>" );
                        }
                        $e.html( temp.join(""));
                        o2.refresh();
                    }
                } ) );
            });
        },
        /**
         @description        验证码
         @param
             --$el           必填，按钮的dom对象
             --o             必填，调接口要传的参数，里面包含了下面的参数，不会提交给接口
             --url:         验证码接口的地址
             --img:         img, // 刷新验证码
         @return             undefined
         */
        verifyCode : function( $el, o ) {
            var _this = this;
            if ( !o ) {
                SQ.alert( "没有参数" );
                return;
            }

            var url, img, s, f, a,
                count = $el.data( "count" );

            // 倒计时
            if ( !count ) {
                count = new SQ.Count( {
                    content: "120秒后重新发送",
                    auto: false,
                    method: o.method || "text",
                    element: $el
                } ).bind( "finish", function() {
                        $el.text( "重新发送" ).removeClass( "disabled" );
                    } );
                $el.data( "count", count );
            }

            if ( o.url ) {
                url = o.url;
                delete o.url;
            }

            if ( o.img ) {
                img = o.img;
                delete o.img;
            }
            s = o.success || $.noop;
            f = o.fail || $.noop;
            a = o.always || $.noop;

            delete o.success;
            delete o.fail;
            delete o.always;

            url = url ? url : _this.kfDomain+"/index.php";

            ajaxFn( $.extend( true, {}, _this.aj, {
                url: url,
                data: o,
                successCall: function( res ) {
                    SQ.alert( res.msg );
                    if ( +res.code === 1 ) {
                        $el.addClass( "disabled" ).text( "120秒后重新发送" );
                        count.start();
                        s.call( this, res, $el );
                    } else {
                        if ( +res.code === -110 ) {
                            common.user.skipToLogin();
                            return;
                        }
                        $el.removeClass( "disabled" ).text( "重新发送" );
                        f.call( this, res, $el );
                    }
                },
                failCall: function() {
                    SQ.alert( "获取安全码失败，请重新尝试^o^" );
                    f.call( this, null, $el );
                },
                alwaysCall: function() {
                    a.call( this, null, $el );
                }
            } ) );
        },
        /*发送验证码dialog*/
        sendCodeDialog: function( fn ) {
            var _this = this,
                saveCode = "#save_code";

            if ( !_this.dlg ) {
                _this.dlg = new SQ.Dialog( {
                    title: "温馨提示",
                    width: 420,
                    height: 140,
                    content: $( "#savecode-dialog" ),
                    buttons: {
                        "发送短信": {
                            cls: "btn-s-140",
                            fn: function( event, dialog ) {
                                var $this = $( event.target );
                                if ( $( saveCode ).data( "status" ) !== "right" ) return;
                                if ( $this.hasClass( "pending" ) ) return;
                                $this.addClass( "pending" ).text( "发送中…" );
                                fn && fn.call( _this, event, dialog );
                            }
                        }
                    }
                } );

                //验证验证码是否输入正确
                $( saveCode ).on( "keyup", function() {
                    var $this = $( this ),
                        $msgDom = $( "#savecode-msg" ),
                        msgText = $this.data( "message" );
                    if ( $this.val().length !== 4 ) {
                        $this.data( "status", "error" );
                        $msgDom.text( msgText );
                        return;
                    }
                    $this.data( "status", "padding" );
                    ajaxFn( $.extend( true, {}, _this.aj, {
                        url: _this.kfDomain+ _this.vercodeUrlCheck,
                        data: {
                            ajax: 1,
                            safe_code: $this.val()
                        },
                        successCall: function( res ) {
                            if ( !res ) return;

                            if ( res.code !== 1 ) {
                                $this.data( "status", "error" );
                                $msgDom.text( res.msg );
                            } else {
                                $this.data( "status", "right" );
                                $msgDom.text( "" );
                            }
                        },
                        failCall: function() {
                            $msgDom.text( "验证失败，请稍后再试" );
                        }
                    } ) );
                } );
                _this.dlg.bind( "hide", function( d ) {
                    $("#phone-img").attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime());
                    $( saveCode ).val( "" );
                    $( "#savecode-msg" ).text( "" );
                } );
                //获取手机注册验证码图片
                $("#phone-img").on( "click", function() {
                    $(this).attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime());
                    $( saveCode ).val( "" ).focus();
                } );
            } else {
                _this.dlg.show();
            }

            setTimeout(function(){
                $("#phone-img").attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime());
                $( saveCode ).val( "" ).focus();
            },10)

        },
        /*发送邮箱验证码dialog*/
        sendEmailCodeDialog: function( fn ) {
            var _this = this,
                saveCode = "#save_code_email";
            if ( !_this.delg ) {
                _this.delg = new SQ.Dialog( {
                    title: "温馨提示",
                    width: 420,
                    height: 140,
                    content: $( "#savecode-dialog-email" ),
                    buttons: {
                        "发送邮件": {
                            cls: "btn-s-140",
                            fn: function( event, dialog ) {
                                var $this = $( event.target );
                                if ( $( saveCode ).data( "status" ) !== "right" ) return;
                                if ( $this.hasClass( "pending" ) ) return;
                                $this.addClass( "pending" ).text( "发送中…" );
                                fn && fn.call( _this, event, dialog );
                            }
                        }
                    }
                } );
                //验证验证码是否输入正确
                $( saveCode ).on( "keyup", function() {
                    var $this = $( this ),
                        $msgDom = $( "#savecode-msg-email" ),
                        msgText = $this.data( "message" );
                    if ( $this.val().length !== 4 ) {
                        $this.data( "status", "error" );
                        $msgDom.text( msgText );
                        return;
                    }
                    $this.data( "status", "padding" );
                    ajaxFn( $.extend( true, {}, _this.aj, {
                        url: _this.kfDomain+ _this.vercodeUrlCheck,
                        data: {
                            ajax: 1,
                            safe_code: $this.val()
                        },
                        successCall: function( res ) {
                            if ( !res ) return;

                            if ( res.code !== 1 ) {
                                $this.data( "status", "error" );
                                $msgDom.text( res.msg );
                            } else {
                                $this.data( "status", "right" );
                                $msgDom.text( "" );
                            }
                        },
                        failCall: function() {
                            $msgDom.text( "验证失败，请稍后再试" );
                        }
                    } ) );
                } );
                _this.delg.bind( "hide", function( d ) {
                    $("#phone-img-email").attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime());
                    $( saveCode ).val( "" );
                    $( "#savecode-msg-email" ).text( "" );
                } );
                //获取手机注册验证码图片
                $("#phone-img-email").on( "click", function() {
                    $(this).attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime());
                    $( saveCode ).val( "" ).focus();
                } );
            } else {
                _this.delg.show();
            }

            setTimeout(function(){
                $("#phone-img-email").attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime());
                $( saveCode ).val( "" ).focus();
            },10)

        },
        /**
         * 解析目标url为json对象
         * @param url
         * @param isDecode
         * @returns {Object}
         */
        queryToJson: function (url, isDecode) {
            url = url || location.hash;

            var query = url.substr(url.indexOf('#') + 1),
                params = query.split('&'),
                len = params.length,
                result = {},
                i = 0,
                key,
                value,
                item,
                param;

            for (; i < len; i++) {
                param = params[i].split('=');
                key = param[0];
                if (key) {
                    if (param[1]) {
                        value = !!isDecode ? decodeURIComponent(param[1]) : param[1];
                    } else {
                        value = "";
                    }
                }
                item = result[key];
                if ('undefined' == typeof item) {
                    result[key] = value;
                }
                else
                if ($.isArray(item)) {
                    item.push(value);
                }
                else {
                    result[key] = [item, value];
                }
            }
            return result;
        },
        /**
         * 获取url参数
         * @param {String} name - 参数名
         * @param {String} url - url地址 [可选]
         * @param {String} isDecode - 是否编码 [可选]
         * @returns {*}
         */
        getHashParam: function( name, url, isDecode ) {
            var json = this.queryToJson( url, isDecode );
            if ( name ) {
                return json[name] || "";
            } else {
                return json;
            }
        },
        /**
         @description        底部相关问题
         @param
             --$element      必填，dom对象
             --module        必填，帐号修复zhxf&被盗申诉bdss
             --count         验证码接口的地址
         @return             undefined
         */
        bottomProblems: function( $element , module , count  ){
            ajaxFn( $.extend( true, {}, {}, {
                url: "http://kf.37.com/static/js/hot_list/"+module+".js",
                data: "",
                dataType: "jsonp",
                jsonpCallback:"kf_callback_hot_list",
                successCall: function( res ) {
                    if ( res ) {
                        var liTpl = " <li><i></i><a href='{href}' target='_blank'>{title}</a></li> ",
                            liHtml= "";
                        for( var i = 0; i < count; i++){
                            res[i] && ( liHtml += liTpl.replace( "{href}" , "/index.php?c=problem&a=hot_list&id="+res[i].id )
                                 .replace( "{title}", res[i].problem ) );
                        }

                        $element.children("ul")[0].innerHTML = liHtml;
                        $element.show();
                    } else {
                        if ( res.code === -110 ) {
                            common.user.skipToLogin();
                        } else {
                            SQ.alert( res.msg );
                        }
                    }
                },
                failCall: function ( ){

                }

            } ) );
        },
        /**
         @description        充值记录的DOM与事件绑定
         @param
         @return             undefined
         */
        rechargeRecordInit: function( count ){

            var $rechargeChild = $(".charge-child"),
                $rechargeChildLast = $rechargeChild.last(),
                $serviceRechargeAdd = $(".service-recharge-add"),
                $chargeTr = $(".charge-tr"),
                $rechargeDom =  "<div class=\"charge-child\"> " +
                                    "<input name=\"pay_time\"  placeholder=\"请选择充值日期\" data-message=\"请选择充值日期\" type=\"text\" class=\"input\" value=\"\" onclick=\"laydate({istime: true, format: \'YYYY-MM-DD\',max: laydate.now()})\" style=\"width: 134px;\" readonly>"+
                                    "<input name=\"pay_account\" placeholder=\"充值金额（数字）\" data-message=\"请输入帐号充值金额\" type=\"text\" class=\"input\" value=\"\" style=\"width: 134px;margin-left: 4px\">"+
                                    "<a class=\"service-form-add recharge-del\" style=\"top: -4px;left: 305px;width:40px;height:34px;line-height:34px;\">删除</a>"+
                                "</div>",
                addHeight = 45;
            if( $serviceRechargeAdd.hasClass("pending") ) return;
            //增加充值Dom结构
            $rechargeChild.parent().append( $rechargeDom );
            //充值框的高度增加
            $chargeTr.css("height", ($chargeTr.height() + addHeight) );
            //充值框的top增加
            $(".charge-child").last().css("top", ($rechargeChildLast.position().top + addHeight) );
            //充值的a标签top增加
            $serviceRechargeAdd.css("top", ($serviceRechargeAdd.position().top + addHeight) );
            //充值tips增加
            $("#recharge-tips").css("top", ($("#recharge-tips").position().top + addHeight) );
            //充值msg增加
            $("#recharge-msg").css("top", ( $("#recharge-msg").position().top + addHeight));
            if ( $(".charge-child").length == count ){
                $("#recharge-msg").text("最多填写充值记录"+count+"条").show();
                $serviceRechargeAdd.addClass("pending");
            }
        },
        /**
         * 删除节点
         *
         * */
        rechargeRecordDel: function( $this ){
            if( $(".service-recharge-add").hasClass("pending") ) {
                $(".service-recharge-add").removeClass("pending")
            }
            //充值框的高度减少
            $(".charge-tr").css("height", ($(".charge-tr").height() - 45) );
            //后面的充值框高度减少
            $this.parent().nextAll(".charge-child").each(function() {
                var $this = $(this);
                $this.css("top", ( $this.position().top - 45) );
            });
            //充值的a标签top减少
            $(".service-recharge-add").css("top", ($(".service-recharge-add").position().top - 45) );
            //充值tips减少
            $("#recharge-tips").css("top", ($("#recharge-tips").position().top - 45) );
            //充值msg减少
            $("#recharge-msg").css("top", ( $("#recharge-msg").position().top - 45 )).text("");

            $this.parent().remove();
        },
        /**
         @description           充值记录获取以及
         @param
         @return
         */
        rechargeRecordArr: function(){
            var $rechargeChild = $(".charge-child"),arr =[],obj = {};
            $rechargeChild.each(function(){
                var $this = $(this),
                    pay_time =  $this.children("input[name='pay_time']")[0].value,
                    pay_account = $this.children("input[name='pay_account']").val();
                if( !pay_time || !pay_account ){
                    return;
                }
                obj = {
                    date: pay_time,
                    money: pay_account
                };
                arr.push(obj);
            });

            return arr;
        },
        /**
         @description           充值记录验证
         @param
         @return
         */
        rechargeRecordCheck: function(){
            var $rechargeChild = $(".charge-child"),
                isNum = true;

            if( !$rechargeChild.first().children("input[name='pay_time']")[0].value  || !$rechargeChild.first().children("input[name='pay_account']").val()){

                return SQ.alert("请填写充值记录，如无充值金额填0");
            }

            $rechargeChild.children("input[name='pay_account']").each(function(){
                var $this = $(this);
                if( $this.val() && $this.prev()[0].value && !SQ.Validate.methods.num( "field",$this.val() )  ){
                    isNum = false;
                }
            });

            if ( !isNum ){
                return SQ.alert("请填写整数金额,如无充值金额填0");
            }

            return false;
        },
        /**
         @description       调至某个高度值，默认为顶部
         @param
             --top      可选，高度
             --speed    可选，速度
         @return
         */
        scrollToTop: function( top ,speed ) {
            var thisTop = top ? top : 0 ;
            var thisSpeed = speed ? speed : "fast" ;
            $( "html, body" ).animate({
                scrollTop:  thisTop
            }, thisSpeed );
        },
        /**
         * 验证码
         */
        varCodeInit: function() {
            var _this = this;

            $(document)
                //刷新验证码
                .on("click",".service-form-vercode",function(){
                    _this.varCodeRefresh();
                })
                //验证验证码
                .on( "keyup",".vercode-input", function() {
                    var $this = $( this ),
                        $msgDom = $( "#savecode-msg" ),
                        msgText = $this.data( "message" );
                    if ( $this.val().length !== 4 ) {
                        $this.data( "status", "error" );
                        $msgDom.text( msgText );
                        return;
                    }
                    $this.data( "status", "padding" );
                    ajaxFn( $.extend( true, {}, _this.aj, {
                        url:  _this.kfDomain+ _this.vercodeUrlCheck,
                        data: {
                            ajax: 1,
                            safe_code: $this.val()
                        },
                        successCall: function( res ) {
                            if ( !res ) return;

                            if ( res.code !== 1 ) {
                                $this.data( "status", "error" );
                                $msgDom.text( res.msg );
                            } else {
                                $this.data( "status", "right" );
                                $msgDom.text( "" );
                            }
                        },
                        failCall: function() {
                            $msgDom.text( "安全码验证失败，请稍后再试" );
                        }
                    } ) );
                })
                .on( "blur" , ".vercode-input" ,function(){
                    if( !$(this).val() )
                        $( "#savecode-msg").text( "请输入验证码" );
                });

        },
        /*验证检测*/
        varCodeInitCheck: function(){
            var $vercodeInput = $(".vercode-input");
            if( !$vercodeInput.val() ){
                $( "#savecode-msg").text( "请输入验证码" );
                SQ.alert( "请输入验证码" );
                return false;
            }
            if( $vercodeInput.data("status") == "error" ){
                SQ.alert( "验证码输入错误" );
                return false;
            }
            return true;
        },
        /*验证码刷新*/
        varCodeRefresh: function(){
            var _this = this;
            $(".service-form-vercode")
                .children().attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime())
                .end()
                .siblings("input").val( "" );
        },
        /*发送手机短信验证码*/
        sendPhoneCode: function( e1 , e2 , c , a ){
            var _this = this,
                $aucode = $("#aucode");
            $(".send-phone-code")
                //刷新验证码
                .on("click",function(e){
                    e.preventDefault();
                    if ( this.className.indexOf( "disabled" ) > -1 ) return;


                    //判断是否填写手机
                    $e1 = $("#"+e1);
                    if( !$e1.val() ){
                        SQ.alert( "请输入获取短信验证码的手机号码" );
                        return false;
                    }
                    if ( $e1.length > 0 && !SQ.Validate.methods.phone( "field", $e1.val() ) ) {
                        SQ.alert( "输入的手机号码无效" );
                        return false;
                    }
                    //判断是否填写验证码、验证是否正确
                    if( $aucode.data("status") === "right" ){
                        var $this = $(this),
                            postdata = {
                                url: _this.domainUrl ,
                                c: c,
                                a: a
                            };
                        postdata[e1] = $e1.val();
                        postdata[e2] = $aucode.val();
                        $this.removeClass("pending").html("短信发送中...");

                        modulesUtil.verifyCode( $this, $.extend( true, postdata, {
                            always: function () {
                                $this.removeClass("pending").html("获取短信验证码");
                                $aucode.val( "" );
                                $(".service-form-vercode").children().attr("src",_this.vercodeUrl+"&t="+(new Date()).getTime());
                            }
                        } ) );

                    } else {
                        $aucode.focus();
                        if( !$aucode.val() ){
                            $("#savecode-msg").text( "请输入验证码").show();
                        }else{
                            $("#savecode-msg").text( "验证码输入错误").show();
                        }

                    }
                })


        }

    };

    //所有游戏初始化以及底部生成
    var app = {
        init: function(){
            this.commonFooter();
            this.topAllGames.init();
            this.placeholder();
        },
        /**
         @description   顶部更多游戏
         @return        undefined
         */
        topAllGames: {
            url: {
                header: "http://ptres.37.com/content/cache/header.js",
                moreData: "http://ptres.37.com/content/s_www/pt_2015_head_nav_games.js"
            },
            isMoreOpen : false,
            mapOfMoreState: {
                hot: '<span class="h"></span>',
                "new": '<span class="n"></span>'
            },
            init: function(){
                this._events();
            },
            _getMoreData: function() {
                var that = this;
                /*$.ajax({
                 url: this.url.header,
                 cache: false,
                 dataType: "jsonp",
                 jsonpCallback: "content_callback_header"
                 }).done(function( res ) {
                 if ( res.code === 1 && res.msg && res.msg.leader_game ) {
                 that._parseMore( res.msg.leader_game );
                 } else {
                 SQ.log && SQ.log( "SQ.Game: 顶部数据异常" );
                 }
                 }).fail(function() {
                 SQ.log && SQ.log( "SQ.Game: 顶部数据异常" );
                 });*/
                $.getScript( this.url.moreData, function() {
                    res = sq_content_s_www_pt_2015_head_nav_games;
                    if ( !res ){
                        this.$moreTab.data( "getdata", false );
                        return;
                    }
                    that._parseMore( res.cats );
                } );
            },
            _parseMore: function( data ) {
                var l,
                    i = 0,
                    imgtpl = "<div class=\"all-game-img\"><a href=\"{$link}\" target=\"_blank\" title=\"{$title}\"><img src=\"{src}\" data-src=\"{$src}\" alt=\"{$title}\" width=\"400\" height=\"262\" title=\"{$title}\"/></a><div class=\"all-game-txt\">{$content}</div></div>",
                    gametpl = "<dd class=\"top-allgame-li\"><a href=\"{$DOMAIN_URL}\" target=\"_blank\" title=\"{$NAME}\">{$NAME}{spandom}</a></dd>",
                    imgtemp = [],
                    gametemp = [];
                if ( !data ) {
                    this.close();
                } else {
                    for ( ; i < 18; i++ ) {
                        imgtemp.push( SQ.T( imgtpl.replace( "{src}", i == 0 ? "{$src}" : "http://img1.37wanimg.com/www/images/common/spacer.gif" ), data[i].imgs[0] ) );
                        gametemp.push( SQ.T( gametpl.replace( "{spandom}", data[i].games[0][ "PIN" ] ? this.mapOfMoreState[ data[i].games[0][ "PIN" ]] : "" ), data[i].games[0] ) );
                    }

                    this.$moreWrap.prepend( imgtemp.join("") );
                    this.$morePanel.find( "dt" ).after( gametemp.join("") ).removeClass( "top-loading" );
                    //this.$moreTab.data( "getdata", true );
                    var topAllGameTab = new SQ.Tab( {
                        el: "#allGameList", // 容器选择器 默认 body
                        tabs: "#TopAllGameName .top-allgame-li", //选项 选择器 默认 li
                        panels: ".all-game-img", //内容选择器 默认 div
                        eventType: "hover", //切换事件 默认点击
                        index: 0, //初始显示第一个
                        auto: false, // 是否自动切换
                        interval: 5000, //自动切换时间间隔
                        currentClass: "current" // 当前选项的样式class
                    } );
                    topAllGameTab.bind( "change", function( i, e ) {
                        var $dom = e.panels.eq( i ).find( "img" ),
                            imgUrl = $dom.data( "src" ),
                            img = new Image();
                        img.onload = function(){
                            $dom.attr( "src", imgUrl );
                        };
                        img.src = imgUrl;
                    } );
                }
            },
            openMore: function() {
                if ( this.isMoreOpen ) {
                    return;
                }
                if ( !this.$moreWrap ) {
                    this.$moreWrap = $( "#allGameList" );
                }
                if ( !this.$morePanel ) {
                    this.$morePanel = $( "#TopAllGameName" );
                }
                this.$moreTab.addClass( "all-game-show" );
                this.$moreWrap.show();
                this.isMoreOpen = true;
                //this.trigger( "open", "more", {
                //    panel: this.$morePanel,
                //    wrap: this.$moreWrap,
                //    tab: this.$moreTab
                //});
                if ( !this.$moreTab.data("getdata") ) {
                    this._getMoreData();
                    this.$moreTab.data( "getdata", true );
                }
            },
            closeMore: function() {
                if ( this.isMoreOpen ) {
                    this.$moreTab.removeClass( "all-game-show" );
                    this.$moreWrap.hide();
                    this.isMoreOpen = false;
                    //this.trigger( "close", "more", {
                    //    panel: this.$morePanel,
                    //    wrap: this.$moreWrap,
                    //    tab: this.$moreTab
                    //});
                }
            },
            _events: function(){
                that = this;
                $(".hd-top")
                    .on( "mouseenter mouseleave", "#allGame, #allGameList", function( e ) {
                        if ( !that.$moreTab ) {
                            that.$moreTab = $( "#allGame" );
                        }
                        e.type === "mouseenter" ? that.openMore() : that.closeMore();
                    })
                    .on( "mouseenter mouseleave", "#topUserName, #topUserInfo", function( e ) {
                        if ( !that.$infoTab ) {
                            that.$infoTab = $( this );
                        }
                        if ( !that.$infoMenu ) {
                            that.$infoMenu = $( "#topUserInfo" );
                        }
                    })
                    .on( "mouseenter mouseleave", "#topHasMsg, #topMsgCon", function( e ) {
                        if ( !that.$msgTab ) {
                            that.$msgTab = $( this );
                        }
                        if ( !that.$msgMenu ) {
                            that.$msgMenu = $( "#topMsgCon" );
                        }
                    })
            }
        },
        /**
         @description   公共底部生成
         @return        undefined
         */
        commonFooter: function(){
            new SQ.Footer();
        },
        placeholder: function(){
            $('input,textarea').placeholder();
        }
    };

    return {
        modulesUtil:modulesUtil,
        init:function(){
            app.init();
        }
    };
});

